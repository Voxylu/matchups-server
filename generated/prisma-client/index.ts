// Code generated by Prisma (prisma@1.21.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  game: (where?: GameWhereInput) => Promise<boolean>;
  profile: (where?: ProfileWhereInput) => Promise<boolean>;
  role: (where?: RoleWhereInput) => Promise<boolean>;
  team: (where?: TeamWhereInput) => Promise<boolean>;
  utilisateur: (where?: UtilisateurWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  game: (where: GameWhereUniqueInput) => GamePromise;
  games: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Game>;
  gamesConnection: (
    args?: {
      where?: GameWhereInput;
      orderBy?: GameOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GameConnectionPromise;
  profile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  profiles: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Profile>;
  profilesConnection: (
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProfileConnectionPromise;
  role: (where: RoleWhereUniqueInput) => RolePromise;
  roles: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Role>;
  rolesConnection: (
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => RoleConnectionPromise;
  team: (where: TeamWhereUniqueInput) => TeamPromise;
  teams: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Team>;
  teamsConnection: (
    args?: {
      where?: TeamWhereInput;
      orderBy?: TeamOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => TeamConnectionPromise;
  utilisateur: (where: UtilisateurWhereUniqueInput) => UtilisateurPromise;
  utilisateurs: (
    args?: {
      where?: UtilisateurWhereInput;
      orderBy?: UtilisateurOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Utilisateur>;
  utilisateursConnection: (
    args?: {
      where?: UtilisateurWhereInput;
      orderBy?: UtilisateurOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UtilisateurConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createGame: (data: GameCreateInput) => GamePromise;
  updateGame: (
    args: { data: GameUpdateInput; where: GameWhereUniqueInput }
  ) => GamePromise;
  updateManyGames: (
    args: { data: GameUpdateManyMutationInput; where?: GameWhereInput }
  ) => BatchPayloadPromise;
  upsertGame: (
    args: {
      where: GameWhereUniqueInput;
      create: GameCreateInput;
      update: GameUpdateInput;
    }
  ) => GamePromise;
  deleteGame: (where: GameWhereUniqueInput) => GamePromise;
  deleteManyGames: (where?: GameWhereInput) => BatchPayloadPromise;
  createProfile: (data: ProfileCreateInput) => ProfilePromise;
  updateProfile: (
    args: { data: ProfileUpdateInput; where: ProfileWhereUniqueInput }
  ) => ProfilePromise;
  updateManyProfiles: (
    args: { data: ProfileUpdateManyMutationInput; where?: ProfileWhereInput }
  ) => BatchPayloadPromise;
  upsertProfile: (
    args: {
      where: ProfileWhereUniqueInput;
      create: ProfileCreateInput;
      update: ProfileUpdateInput;
    }
  ) => ProfilePromise;
  deleteProfile: (where: ProfileWhereUniqueInput) => ProfilePromise;
  deleteManyProfiles: (where?: ProfileWhereInput) => BatchPayloadPromise;
  createRole: (data: RoleCreateInput) => RolePromise;
  updateRole: (
    args: { data: RoleUpdateInput; where: RoleWhereUniqueInput }
  ) => RolePromise;
  updateManyRoles: (
    args: { data: RoleUpdateManyMutationInput; where?: RoleWhereInput }
  ) => BatchPayloadPromise;
  upsertRole: (
    args: {
      where: RoleWhereUniqueInput;
      create: RoleCreateInput;
      update: RoleUpdateInput;
    }
  ) => RolePromise;
  deleteRole: (where: RoleWhereUniqueInput) => RolePromise;
  deleteManyRoles: (where?: RoleWhereInput) => BatchPayloadPromise;
  createTeam: (data: TeamCreateInput) => TeamPromise;
  updateTeam: (
    args: { data: TeamUpdateInput; where: TeamWhereUniqueInput }
  ) => TeamPromise;
  updateManyTeams: (
    args: { data: TeamUpdateManyMutationInput; where?: TeamWhereInput }
  ) => BatchPayloadPromise;
  upsertTeam: (
    args: {
      where: TeamWhereUniqueInput;
      create: TeamCreateInput;
      update: TeamUpdateInput;
    }
  ) => TeamPromise;
  deleteTeam: (where: TeamWhereUniqueInput) => TeamPromise;
  deleteManyTeams: (where?: TeamWhereInput) => BatchPayloadPromise;
  createUtilisateur: (data: UtilisateurCreateInput) => UtilisateurPromise;
  updateUtilisateur: (
    args: { data: UtilisateurUpdateInput; where: UtilisateurWhereUniqueInput }
  ) => UtilisateurPromise;
  updateManyUtilisateurs: (
    args: {
      data: UtilisateurUpdateManyMutationInput;
      where?: UtilisateurWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUtilisateur: (
    args: {
      where: UtilisateurWhereUniqueInput;
      create: UtilisateurCreateInput;
      update: UtilisateurUpdateInput;
    }
  ) => UtilisateurPromise;
  deleteUtilisateur: (where: UtilisateurWhereUniqueInput) => UtilisateurPromise;
  deleteManyUtilisateurs: (
    where?: UtilisateurWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  game: (
    where?: GameSubscriptionWhereInput
  ) => GameSubscriptionPayloadSubscription;
  profile: (
    where?: ProfileSubscriptionWhereInput
  ) => ProfileSubscriptionPayloadSubscription;
  role: (
    where?: RoleSubscriptionWhereInput
  ) => RoleSubscriptionPayloadSubscription;
  team: (
    where?: TeamSubscriptionWhereInput
  ) => TeamSubscriptionPayloadSubscription;
  utilisateur: (
    where?: UtilisateurSubscriptionWhereInput
  ) => UtilisateurSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RoleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imgUrl_ASC"
  | "imgUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProfileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "imgUrl_ASC"
  | "imgUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GameOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type TeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "ownerID_ASC"
  | "ownerID_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UtilisateurOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type GameWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface RoleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  imgUrl?: String;
  imgUrl_not?: String;
  imgUrl_in?: String[] | String;
  imgUrl_not_in?: String[] | String;
  imgUrl_lt?: String;
  imgUrl_lte?: String;
  imgUrl_gt?: String;
  imgUrl_gte?: String;
  imgUrl_contains?: String;
  imgUrl_not_contains?: String;
  imgUrl_starts_with?: String;
  imgUrl_not_starts_with?: String;
  imgUrl_ends_with?: String;
  imgUrl_not_ends_with?: String;
  game?: GameWhereInput;
  players_every?: ProfileWhereInput;
  players_some?: ProfileWhereInput;
  players_none?: ProfileWhereInput;
  AND?: RoleWhereInput[] | RoleWhereInput;
  OR?: RoleWhereInput[] | RoleWhereInput;
  NOT?: RoleWhereInput[] | RoleWhereInput;
}

export interface GameWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  roles_every?: RoleWhereInput;
  roles_some?: RoleWhereInput;
  roles_none?: RoleWhereInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  players_every?: ProfileWhereInput;
  players_some?: ProfileWhereInput;
  players_none?: ProfileWhereInput;
  AND?: GameWhereInput[] | GameWhereInput;
  OR?: GameWhereInput[] | GameWhereInput;
  NOT?: GameWhereInput[] | GameWhereInput;
}

export interface ProfileWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  imgUrl?: String;
  imgUrl_not?: String;
  imgUrl_in?: String[] | String;
  imgUrl_not_in?: String[] | String;
  imgUrl_lt?: String;
  imgUrl_lte?: String;
  imgUrl_gt?: String;
  imgUrl_gte?: String;
  imgUrl_contains?: String;
  imgUrl_not_contains?: String;
  imgUrl_starts_with?: String;
  imgUrl_not_starts_with?: String;
  imgUrl_ends_with?: String;
  imgUrl_not_ends_with?: String;
  role?: RoleWhereInput;
  game?: GameWhereInput;
  team?: TeamWhereInput;
  AND?: ProfileWhereInput[] | ProfileWhereInput;
  OR?: ProfileWhereInput[] | ProfileWhereInput;
  NOT?: ProfileWhereInput[] | ProfileWhereInput;
}

export interface TeamWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  ownerID?: ID_Input;
  ownerID_not?: ID_Input;
  ownerID_in?: ID_Input[] | ID_Input;
  ownerID_not_in?: ID_Input[] | ID_Input;
  ownerID_lt?: ID_Input;
  ownerID_lte?: ID_Input;
  ownerID_gt?: ID_Input;
  ownerID_gte?: ID_Input;
  ownerID_contains?: ID_Input;
  ownerID_not_contains?: ID_Input;
  ownerID_starts_with?: ID_Input;
  ownerID_not_starts_with?: ID_Input;
  ownerID_ends_with?: ID_Input;
  ownerID_not_ends_with?: ID_Input;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  wantedRoles_every?: RoleWhereInput;
  wantedRoles_some?: RoleWhereInput;
  wantedRoles_none?: RoleWhereInput;
  players_every?: ProfileWhereInput;
  players_some?: ProfileWhereInput;
  players_none?: ProfileWhereInput;
  AND?: TeamWhereInput[] | TeamWhereInput;
  OR?: TeamWhereInput[] | TeamWhereInput;
  NOT?: TeamWhereInput[] | TeamWhereInput;
}

export type ProfileWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type RoleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type TeamWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  ownerID?: ID_Input;
}>;

export type UtilisateurWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface UtilisateurWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  profiles_every?: ProfileWhereInput;
  profiles_some?: ProfileWhereInput;
  profiles_none?: ProfileWhereInput;
  AND?: UtilisateurWhereInput[] | UtilisateurWhereInput;
  OR?: UtilisateurWhereInput[] | UtilisateurWhereInput;
  NOT?: UtilisateurWhereInput[] | UtilisateurWhereInput;
}

export interface GameCreateInput {
  name: String;
  roles?: RoleCreateManyWithoutGameInput;
  description: String;
  players?: ProfileCreateManyWithoutGameInput;
}

export interface RoleCreateManyWithoutGameInput {
  create?: RoleCreateWithoutGameInput[] | RoleCreateWithoutGameInput;
  connect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
}

export interface RoleCreateWithoutGameInput {
  name: String;
  imgUrl: String;
  players?: ProfileCreateManyWithoutRoleInput;
}

export interface ProfileCreateManyWithoutRoleInput {
  create?: ProfileCreateWithoutRoleInput[] | ProfileCreateWithoutRoleInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface ProfileCreateWithoutRoleInput {
  name: String;
  description: String;
  imgUrl?: String;
  game: GameCreateOneWithoutPlayersInput;
  team?: TeamCreateOneWithoutPlayersInput;
}

export interface GameCreateOneWithoutPlayersInput {
  create?: GameCreateWithoutPlayersInput;
  connect?: GameWhereUniqueInput;
}

export interface GameCreateWithoutPlayersInput {
  name: String;
  roles?: RoleCreateManyWithoutGameInput;
  description: String;
}

export interface TeamCreateOneWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput;
  connect?: TeamWhereUniqueInput;
}

export interface TeamCreateWithoutPlayersInput {
  name: String;
  ownerID: ID_Input;
  description?: String;
  wantedRoles?: RoleCreateManyInput;
}

export interface RoleCreateManyInput {
  create?: RoleCreateInput[] | RoleCreateInput;
  connect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
}

export interface RoleCreateInput {
  name: String;
  imgUrl: String;
  game: GameCreateOneWithoutRolesInput;
  players?: ProfileCreateManyWithoutRoleInput;
}

export interface GameCreateOneWithoutRolesInput {
  create?: GameCreateWithoutRolesInput;
  connect?: GameWhereUniqueInput;
}

export interface GameCreateWithoutRolesInput {
  name: String;
  description: String;
  players?: ProfileCreateManyWithoutGameInput;
}

export interface ProfileCreateManyWithoutGameInput {
  create?: ProfileCreateWithoutGameInput[] | ProfileCreateWithoutGameInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface ProfileCreateWithoutGameInput {
  name: String;
  description: String;
  imgUrl?: String;
  role: RoleCreateOneWithoutPlayersInput;
  team?: TeamCreateOneWithoutPlayersInput;
}

export interface RoleCreateOneWithoutPlayersInput {
  create?: RoleCreateWithoutPlayersInput;
  connect?: RoleWhereUniqueInput;
}

export interface RoleCreateWithoutPlayersInput {
  name: String;
  imgUrl: String;
  game: GameCreateOneWithoutRolesInput;
}

export interface GameUpdateInput {
  name?: String;
  roles?: RoleUpdateManyWithoutGameInput;
  description?: String;
  players?: ProfileUpdateManyWithoutGameInput;
}

export interface RoleUpdateManyWithoutGameInput {
  create?: RoleCreateWithoutGameInput[] | RoleCreateWithoutGameInput;
  delete?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
  connect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
  disconnect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
  update?:
    | RoleUpdateWithWhereUniqueWithoutGameInput[]
    | RoleUpdateWithWhereUniqueWithoutGameInput;
  upsert?:
    | RoleUpsertWithWhereUniqueWithoutGameInput[]
    | RoleUpsertWithWhereUniqueWithoutGameInput;
}

export interface RoleUpdateWithWhereUniqueWithoutGameInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateWithoutGameDataInput;
}

export interface RoleUpdateWithoutGameDataInput {
  name?: String;
  imgUrl?: String;
  players?: ProfileUpdateManyWithoutRoleInput;
}

export interface ProfileUpdateManyWithoutRoleInput {
  create?: ProfileCreateWithoutRoleInput[] | ProfileCreateWithoutRoleInput;
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  update?:
    | ProfileUpdateWithWhereUniqueWithoutRoleInput[]
    | ProfileUpdateWithWhereUniqueWithoutRoleInput;
  upsert?:
    | ProfileUpsertWithWhereUniqueWithoutRoleInput[]
    | ProfileUpsertWithWhereUniqueWithoutRoleInput;
}

export interface ProfileUpdateWithWhereUniqueWithoutRoleInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutRoleDataInput;
}

export interface ProfileUpdateWithoutRoleDataInput {
  name?: String;
  description?: String;
  imgUrl?: String;
  game?: GameUpdateOneRequiredWithoutPlayersInput;
  team?: TeamUpdateOneWithoutPlayersInput;
}

export interface GameUpdateOneRequiredWithoutPlayersInput {
  create?: GameCreateWithoutPlayersInput;
  update?: GameUpdateWithoutPlayersDataInput;
  upsert?: GameUpsertWithoutPlayersInput;
  connect?: GameWhereUniqueInput;
}

export interface GameUpdateWithoutPlayersDataInput {
  name?: String;
  roles?: RoleUpdateManyWithoutGameInput;
  description?: String;
}

export interface GameUpsertWithoutPlayersInput {
  update: GameUpdateWithoutPlayersDataInput;
  create: GameCreateWithoutPlayersInput;
}

export interface TeamUpdateOneWithoutPlayersInput {
  create?: TeamCreateWithoutPlayersInput;
  update?: TeamUpdateWithoutPlayersDataInput;
  upsert?: TeamUpsertWithoutPlayersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: TeamWhereUniqueInput;
}

export interface TeamUpdateWithoutPlayersDataInput {
  name?: String;
  ownerID?: ID_Input;
  description?: String;
  wantedRoles?: RoleUpdateManyInput;
}

export interface RoleUpdateManyInput {
  create?: RoleCreateInput[] | RoleCreateInput;
  update?:
    | RoleUpdateWithWhereUniqueNestedInput[]
    | RoleUpdateWithWhereUniqueNestedInput;
  upsert?:
    | RoleUpsertWithWhereUniqueNestedInput[]
    | RoleUpsertWithWhereUniqueNestedInput;
  delete?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
  connect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
  disconnect?: RoleWhereUniqueInput[] | RoleWhereUniqueInput;
}

export interface RoleUpdateWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  data: RoleUpdateDataInput;
}

export interface RoleUpdateDataInput {
  name?: String;
  imgUrl?: String;
  game?: GameUpdateOneRequiredWithoutRolesInput;
  players?: ProfileUpdateManyWithoutRoleInput;
}

export interface GameUpdateOneRequiredWithoutRolesInput {
  create?: GameCreateWithoutRolesInput;
  update?: GameUpdateWithoutRolesDataInput;
  upsert?: GameUpsertWithoutRolesInput;
  connect?: GameWhereUniqueInput;
}

export interface GameUpdateWithoutRolesDataInput {
  name?: String;
  description?: String;
  players?: ProfileUpdateManyWithoutGameInput;
}

export interface ProfileUpdateManyWithoutGameInput {
  create?: ProfileCreateWithoutGameInput[] | ProfileCreateWithoutGameInput;
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  update?:
    | ProfileUpdateWithWhereUniqueWithoutGameInput[]
    | ProfileUpdateWithWhereUniqueWithoutGameInput;
  upsert?:
    | ProfileUpsertWithWhereUniqueWithoutGameInput[]
    | ProfileUpsertWithWhereUniqueWithoutGameInput;
}

export interface ProfileUpdateWithWhereUniqueWithoutGameInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutGameDataInput;
}

export interface ProfileUpdateWithoutGameDataInput {
  name?: String;
  description?: String;
  imgUrl?: String;
  role?: RoleUpdateOneRequiredWithoutPlayersInput;
  team?: TeamUpdateOneWithoutPlayersInput;
}

export interface RoleUpdateOneRequiredWithoutPlayersInput {
  create?: RoleCreateWithoutPlayersInput;
  update?: RoleUpdateWithoutPlayersDataInput;
  upsert?: RoleUpsertWithoutPlayersInput;
  connect?: RoleWhereUniqueInput;
}

export interface RoleUpdateWithoutPlayersDataInput {
  name?: String;
  imgUrl?: String;
  game?: GameUpdateOneRequiredWithoutRolesInput;
}

export interface RoleUpsertWithoutPlayersInput {
  update: RoleUpdateWithoutPlayersDataInput;
  create: RoleCreateWithoutPlayersInput;
}

export interface ProfileUpsertWithWhereUniqueWithoutGameInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutGameDataInput;
  create: ProfileCreateWithoutGameInput;
}

export interface GameUpsertWithoutRolesInput {
  update: GameUpdateWithoutRolesDataInput;
  create: GameCreateWithoutRolesInput;
}

export interface RoleUpsertWithWhereUniqueNestedInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateDataInput;
  create: RoleCreateInput;
}

export interface TeamUpsertWithoutPlayersInput {
  update: TeamUpdateWithoutPlayersDataInput;
  create: TeamCreateWithoutPlayersInput;
}

export interface ProfileUpsertWithWhereUniqueWithoutRoleInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutRoleDataInput;
  create: ProfileCreateWithoutRoleInput;
}

export interface RoleUpsertWithWhereUniqueWithoutGameInput {
  where: RoleWhereUniqueInput;
  update: RoleUpdateWithoutGameDataInput;
  create: RoleCreateWithoutGameInput;
}

export interface GameUpdateManyMutationInput {
  name?: String;
  description?: String;
}

export interface ProfileCreateInput {
  name: String;
  description: String;
  imgUrl?: String;
  role: RoleCreateOneWithoutPlayersInput;
  game: GameCreateOneWithoutPlayersInput;
  team?: TeamCreateOneWithoutPlayersInput;
}

export interface ProfileUpdateInput {
  name?: String;
  description?: String;
  imgUrl?: String;
  role?: RoleUpdateOneRequiredWithoutPlayersInput;
  game?: GameUpdateOneRequiredWithoutPlayersInput;
  team?: TeamUpdateOneWithoutPlayersInput;
}

export interface ProfileUpdateManyMutationInput {
  name?: String;
  description?: String;
  imgUrl?: String;
}

export interface RoleUpdateInput {
  name?: String;
  imgUrl?: String;
  game?: GameUpdateOneRequiredWithoutRolesInput;
  players?: ProfileUpdateManyWithoutRoleInput;
}

export interface RoleUpdateManyMutationInput {
  name?: String;
  imgUrl?: String;
}

export interface TeamCreateInput {
  name: String;
  ownerID: ID_Input;
  description?: String;
  wantedRoles?: RoleCreateManyInput;
  players?: ProfileCreateManyWithoutTeamInput;
}

export interface ProfileCreateManyWithoutTeamInput {
  create?: ProfileCreateWithoutTeamInput[] | ProfileCreateWithoutTeamInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface ProfileCreateWithoutTeamInput {
  name: String;
  description: String;
  imgUrl?: String;
  role: RoleCreateOneWithoutPlayersInput;
  game: GameCreateOneWithoutPlayersInput;
}

export interface TeamUpdateInput {
  name?: String;
  ownerID?: ID_Input;
  description?: String;
  wantedRoles?: RoleUpdateManyInput;
  players?: ProfileUpdateManyWithoutTeamInput;
}

export interface ProfileUpdateManyWithoutTeamInput {
  create?: ProfileCreateWithoutTeamInput[] | ProfileCreateWithoutTeamInput;
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  update?:
    | ProfileUpdateWithWhereUniqueWithoutTeamInput[]
    | ProfileUpdateWithWhereUniqueWithoutTeamInput;
  upsert?:
    | ProfileUpsertWithWhereUniqueWithoutTeamInput[]
    | ProfileUpsertWithWhereUniqueWithoutTeamInput;
}

export interface ProfileUpdateWithWhereUniqueWithoutTeamInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateWithoutTeamDataInput;
}

export interface ProfileUpdateWithoutTeamDataInput {
  name?: String;
  description?: String;
  imgUrl?: String;
  role?: RoleUpdateOneRequiredWithoutPlayersInput;
  game?: GameUpdateOneRequiredWithoutPlayersInput;
}

export interface ProfileUpsertWithWhereUniqueWithoutTeamInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateWithoutTeamDataInput;
  create: ProfileCreateWithoutTeamInput;
}

export interface TeamUpdateManyMutationInput {
  name?: String;
  ownerID?: ID_Input;
  description?: String;
}

export interface UtilisateurCreateInput {
  email: String;
  password: String;
  profiles?: ProfileCreateManyInput;
}

export interface ProfileCreateManyInput {
  create?: ProfileCreateInput[] | ProfileCreateInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface UtilisateurUpdateInput {
  email?: String;
  password?: String;
  profiles?: ProfileUpdateManyInput;
}

export interface ProfileUpdateManyInput {
  create?: ProfileCreateInput[] | ProfileCreateInput;
  update?:
    | ProfileUpdateWithWhereUniqueNestedInput[]
    | ProfileUpdateWithWhereUniqueNestedInput;
  upsert?:
    | ProfileUpsertWithWhereUniqueNestedInput[]
    | ProfileUpsertWithWhereUniqueNestedInput;
  delete?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  connect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
  disconnect?: ProfileWhereUniqueInput[] | ProfileWhereUniqueInput;
}

export interface ProfileUpdateWithWhereUniqueNestedInput {
  where: ProfileWhereUniqueInput;
  data: ProfileUpdateDataInput;
}

export interface ProfileUpdateDataInput {
  name?: String;
  description?: String;
  imgUrl?: String;
  role?: RoleUpdateOneRequiredWithoutPlayersInput;
  game?: GameUpdateOneRequiredWithoutPlayersInput;
  team?: TeamUpdateOneWithoutPlayersInput;
}

export interface ProfileUpsertWithWhereUniqueNestedInput {
  where: ProfileWhereUniqueInput;
  update: ProfileUpdateDataInput;
  create: ProfileCreateInput;
}

export interface UtilisateurUpdateManyMutationInput {
  email?: String;
  password?: String;
}

export interface GameSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GameWhereInput;
  AND?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  OR?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
  NOT?: GameSubscriptionWhereInput[] | GameSubscriptionWhereInput;
}

export interface ProfileSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProfileWhereInput;
  AND?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  OR?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
  NOT?: ProfileSubscriptionWhereInput[] | ProfileSubscriptionWhereInput;
}

export interface RoleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: RoleWhereInput;
  AND?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  OR?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
  NOT?: RoleSubscriptionWhereInput[] | RoleSubscriptionWhereInput;
}

export interface TeamSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TeamWhereInput;
  AND?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  OR?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
  NOT?: TeamSubscriptionWhereInput[] | TeamSubscriptionWhereInput;
}

export interface UtilisateurSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UtilisateurWhereInput;
  AND?: UtilisateurSubscriptionWhereInput[] | UtilisateurSubscriptionWhereInput;
  OR?: UtilisateurSubscriptionWhereInput[] | UtilisateurSubscriptionWhereInput;
  NOT?: UtilisateurSubscriptionWhereInput[] | UtilisateurSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Game {
  id: ID_Output;
  name: String;
  description: String;
}

export interface GamePromise extends Promise<Game>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  roles: <T = FragmentableArray<Role>>(
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<String>;
  players: <T = FragmentableArray<Profile>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GameSubscription
  extends Promise<AsyncIterator<Game>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  roles: <T = Promise<AsyncIterator<RoleSubscription>>>(
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  description: () => Promise<AsyncIterator<String>>;
  players: <T = Promise<AsyncIterator<ProfileSubscription>>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Role {
  id: ID_Output;
  name: String;
  imgUrl: String;
}

export interface RolePromise extends Promise<Role>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imgUrl: () => Promise<String>;
  game: <T = GamePromise>() => T;
  players: <T = FragmentableArray<Profile>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface RoleSubscription
  extends Promise<AsyncIterator<Role>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
  game: <T = GameSubscription>() => T;
  players: <T = Promise<AsyncIterator<ProfileSubscription>>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Profile {
  id: ID_Output;
  name: String;
  description: String;
  imgUrl: String;
}

export interface ProfilePromise extends Promise<Profile>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  imgUrl: () => Promise<String>;
  role: <T = RolePromise>() => T;
  game: <T = GamePromise>() => T;
  team: <T = TeamPromise>() => T;
}

export interface ProfileSubscription
  extends Promise<AsyncIterator<Profile>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
  role: <T = RoleSubscription>() => T;
  game: <T = GameSubscription>() => T;
  team: <T = TeamSubscription>() => T;
}

export interface Team {
  id: ID_Output;
  name: String;
  ownerID: ID_Output;
  description: String;
}

export interface TeamPromise extends Promise<Team>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  ownerID: () => Promise<ID_Output>;
  description: () => Promise<String>;
  wantedRoles: <T = FragmentableArray<Role>>(
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  players: <T = FragmentableArray<Profile>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface TeamSubscription
  extends Promise<AsyncIterator<Team>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  ownerID: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  wantedRoles: <T = Promise<AsyncIterator<RoleSubscription>>>(
    args?: {
      where?: RoleWhereInput;
      orderBy?: RoleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  players: <T = Promise<AsyncIterator<ProfileSubscription>>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GameConnection {}

export interface GameConnectionPromise
  extends Promise<GameConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GameEdge>>() => T;
  aggregate: <T = AggregateGamePromise>() => T;
}

export interface GameConnectionSubscription
  extends Promise<AsyncIterator<GameConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GameEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGameSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GameEdge {
  cursor: String;
}

export interface GameEdgePromise extends Promise<GameEdge>, Fragmentable {
  node: <T = GamePromise>() => T;
  cursor: () => Promise<String>;
}

export interface GameEdgeSubscription
  extends Promise<AsyncIterator<GameEdge>>,
    Fragmentable {
  node: <T = GameSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGame {
  count: Int;
}

export interface AggregateGamePromise
  extends Promise<AggregateGame>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGameSubscription
  extends Promise<AsyncIterator<AggregateGame>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProfileConnection {}

export interface ProfileConnectionPromise
  extends Promise<ProfileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProfileEdge>>() => T;
  aggregate: <T = AggregateProfilePromise>() => T;
}

export interface ProfileConnectionSubscription
  extends Promise<AsyncIterator<ProfileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProfileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProfileSubscription>() => T;
}

export interface ProfileEdge {
  cursor: String;
}

export interface ProfileEdgePromise extends Promise<ProfileEdge>, Fragmentable {
  node: <T = ProfilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProfileEdgeSubscription
  extends Promise<AsyncIterator<ProfileEdge>>,
    Fragmentable {
  node: <T = ProfileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProfile {
  count: Int;
}

export interface AggregateProfilePromise
  extends Promise<AggregateProfile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProfileSubscription
  extends Promise<AsyncIterator<AggregateProfile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface RoleConnection {}

export interface RoleConnectionPromise
  extends Promise<RoleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<RoleEdge>>() => T;
  aggregate: <T = AggregateRolePromise>() => T;
}

export interface RoleConnectionSubscription
  extends Promise<AsyncIterator<RoleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<RoleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateRoleSubscription>() => T;
}

export interface RoleEdge {
  cursor: String;
}

export interface RoleEdgePromise extends Promise<RoleEdge>, Fragmentable {
  node: <T = RolePromise>() => T;
  cursor: () => Promise<String>;
}

export interface RoleEdgeSubscription
  extends Promise<AsyncIterator<RoleEdge>>,
    Fragmentable {
  node: <T = RoleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateRole {
  count: Int;
}

export interface AggregateRolePromise
  extends Promise<AggregateRole>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateRoleSubscription
  extends Promise<AsyncIterator<AggregateRole>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TeamConnection {}

export interface TeamConnectionPromise
  extends Promise<TeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TeamEdge>>() => T;
  aggregate: <T = AggregateTeamPromise>() => T;
}

export interface TeamConnectionSubscription
  extends Promise<AsyncIterator<TeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTeamSubscription>() => T;
}

export interface TeamEdge {
  cursor: String;
}

export interface TeamEdgePromise extends Promise<TeamEdge>, Fragmentable {
  node: <T = TeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TeamEdgeSubscription
  extends Promise<AsyncIterator<TeamEdge>>,
    Fragmentable {
  node: <T = TeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTeam {
  count: Int;
}

export interface AggregateTeamPromise
  extends Promise<AggregateTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTeamSubscription
  extends Promise<AsyncIterator<AggregateTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Utilisateur {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UtilisateurPromise extends Promise<Utilisateur>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  profiles: <T = FragmentableArray<Profile>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UtilisateurSubscription
  extends Promise<AsyncIterator<Utilisateur>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  profiles: <T = Promise<AsyncIterator<ProfileSubscription>>>(
    args?: {
      where?: ProfileWhereInput;
      orderBy?: ProfileOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UtilisateurConnection {}

export interface UtilisateurConnectionPromise
  extends Promise<UtilisateurConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UtilisateurEdge>>() => T;
  aggregate: <T = AggregateUtilisateurPromise>() => T;
}

export interface UtilisateurConnectionSubscription
  extends Promise<AsyncIterator<UtilisateurConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UtilisateurEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUtilisateurSubscription>() => T;
}

export interface UtilisateurEdge {
  cursor: String;
}

export interface UtilisateurEdgePromise
  extends Promise<UtilisateurEdge>,
    Fragmentable {
  node: <T = UtilisateurPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UtilisateurEdgeSubscription
  extends Promise<AsyncIterator<UtilisateurEdge>>,
    Fragmentable {
  node: <T = UtilisateurSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUtilisateur {
  count: Int;
}

export interface AggregateUtilisateurPromise
  extends Promise<AggregateUtilisateur>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUtilisateurSubscription
  extends Promise<AsyncIterator<AggregateUtilisateur>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface GameSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface GameSubscriptionPayloadPromise
  extends Promise<GameSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GamePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GamePreviousValuesPromise>() => T;
}

export interface GameSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GameSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GameSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GamePreviousValuesSubscription>() => T;
}

export interface GamePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
}

export interface GamePreviousValuesPromise
  extends Promise<GamePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
}

export interface GamePreviousValuesSubscription
  extends Promise<AsyncIterator<GamePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface ProfileSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProfileSubscriptionPayloadPromise
  extends Promise<ProfileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProfilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProfilePreviousValuesPromise>() => T;
}

export interface ProfileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProfileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProfileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProfilePreviousValuesSubscription>() => T;
}

export interface ProfilePreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  imgUrl: String;
}

export interface ProfilePreviousValuesPromise
  extends Promise<ProfilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  imgUrl: () => Promise<String>;
}

export interface ProfilePreviousValuesSubscription
  extends Promise<AsyncIterator<ProfilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface RoleSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface RoleSubscriptionPayloadPromise
  extends Promise<RoleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = RolePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = RolePreviousValuesPromise>() => T;
}

export interface RoleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<RoleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = RoleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = RolePreviousValuesSubscription>() => T;
}

export interface RolePreviousValues {
  id: ID_Output;
  name: String;
  imgUrl: String;
}

export interface RolePreviousValuesPromise
  extends Promise<RolePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  imgUrl: () => Promise<String>;
}

export interface RolePreviousValuesSubscription
  extends Promise<AsyncIterator<RolePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  imgUrl: () => Promise<AsyncIterator<String>>;
}

export interface TeamSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface TeamSubscriptionPayloadPromise
  extends Promise<TeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TeamPreviousValuesPromise>() => T;
}

export interface TeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TeamPreviousValuesSubscription>() => T;
}

export interface TeamPreviousValues {
  id: ID_Output;
  name: String;
  ownerID: ID_Output;
  description: String;
}

export interface TeamPreviousValuesPromise
  extends Promise<TeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  ownerID: () => Promise<ID_Output>;
  description: () => Promise<String>;
}

export interface TeamPreviousValuesSubscription
  extends Promise<AsyncIterator<TeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  ownerID: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UtilisateurSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UtilisateurSubscriptionPayloadPromise
  extends Promise<UtilisateurSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UtilisateurPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UtilisateurPreviousValuesPromise>() => T;
}

export interface UtilisateurSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UtilisateurSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UtilisateurSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UtilisateurPreviousValuesSubscription>() => T;
}

export interface UtilisateurPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface UtilisateurPreviousValuesPromise
  extends Promise<UtilisateurPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UtilisateurPreviousValuesSubscription
  extends Promise<AsyncIterator<UtilisateurPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Game",
    embedded: false
  },
  {
    name: "Profile",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Team",
    embedded: false
  },
  {
    name: "Utilisateur",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
