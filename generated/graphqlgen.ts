// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { User, AuthPayload } from "../src/types";
import { Profile, Role, Game, Team } from "./prisma-client";
import { Context } from "../src/types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsProfile {
    id: string;
  }

  export interface ArgsProfiles {
    gameName: string;
  }

  export interface ArgsTeams {
    freeRoleID: string;
    number: number | null;
    skip: number | null;
  }

  export interface ArgsRoles {
    gameName: string;
  }

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type ProfileResolver = (
    parent: undefined,
    args: ArgsProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | null | Promise<Profile | null>;

  export type ProfilesResolver = (
    parent: undefined,
    args: ArgsProfiles,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export type TeamsResolver = (
    parent: undefined,
    args: ArgsTeams,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team[] | Promise<Team[]>;

  export type GamesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game[] | Promise<Game[]>;

  export type RolesResolver = (
    parent: undefined,
    args: ArgsRoles,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role[] | Promise<Role[]>;

  export interface Type {
    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    profile: (
      parent: undefined,
      args: ArgsProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | null | Promise<Profile | null>;

    profiles: (
      parent: undefined,
      args: ArgsProfiles,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;

    teams: (
      parent: undefined,
      args: ArgsTeams,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team[] | Promise<Team[]>;

    games: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game[] | Promise<Game[]>;

    roles: (
      parent: undefined,
      args: ArgsRoles,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role[] | Promise<Role[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ProfilesResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    profiles: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;
  }
}

export namespace ProfileResolvers {
  export const defaultResolvers = {
    id: (parent: Profile) => parent.id,
    name: (parent: Profile) => parent.name,
    description: (parent: Profile) => parent.description,
    imgUrl: (parent: Profile) => parent.imgUrl
  };

  export type IdResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ImgUrlResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RoleResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role | Promise<Role>;

  export type GameResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export type TeamResolver = (
    parent: Profile,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | null | Promise<Team | null>;

  export interface Type {
    id: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    imgUrl: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    role: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role | Promise<Role>;

    game: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;

    team: (
      parent: Profile,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | null | Promise<Team | null>;
  }
}

export namespace RoleResolvers {
  export const defaultResolvers = {
    id: (parent: Role) => parent.id,
    name: (parent: Role) => parent.name,
    imgUrl: (parent: Role) => parent.imgUrl
  };

  export type IdResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ImgUrlResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type GameResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Game | Promise<Game>;

  export type PlayersResolver = (
    parent: Role,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export interface Type {
    id: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    imgUrl: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    game: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Game | Promise<Game>;

    players: (
      parent: Role,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;
  }
}

export namespace GameResolvers {
  export const defaultResolvers = {
    id: (parent: Game) => parent.id,
    name: (parent: Game) => parent.name,
    description: (parent: Game) => parent.description
  };

  export type IdResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type RolesResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role[] | Promise<Role[]>;

  export type DescriptionResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PlayersResolver = (
    parent: Game,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export interface Type {
    id: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    roles: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role[] | Promise<Role[]>;

    description: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    players: (
      parent: Game,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;
  }
}

export namespace TeamResolvers {
  export const defaultResolvers = {
    id: (parent: Team) => parent.id,
    name: (parent: Team) => parent.name,
    ownerID: (parent: Team) => parent.ownerID,
    description: (parent: Team) => parent.description
  };

  export type IdResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type DescriptionResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type OwnerIDResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PlayersResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile[] | Promise<Profile[]>;

  export type WantedRolesResolver = (
    parent: Team,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Role[] | Promise<Role[]>;

  export interface Type {
    id: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    description: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    ownerID: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    players: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile[] | Promise<Profile[]>;

    wantedRoles: (
      parent: Team,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Role[] | Promise<Role[]>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface ArgsSignup {
    email: string;
    password: string;
  }

  export interface ArgsSignin {
    email: string;
    password: string;
  }

  export interface ArgsAddProfile {
    name: string;
    description: string;
    gameName: string;
    roleID: string;
  }

  export interface ArgsEditProfile {
    profileId: string;
    name: string | null;
    description: string | null;
    roleID: string | null;
  }

  export interface ArgsDeleteProfile {
    profileId: string;
  }

  export interface ArgsCreateTeam {
    profileId: string;
    name: string;
    description: string;
    roles: string[];
  }

  export interface ArgsEditTeam {
    profileId: string;
    name: string | null;
    description: string | null;
    kickId: string | null;
  }

  export interface ArgsJoinTeam {
    name: string;
    profileId: string;
  }

  export interface ArgsLeaveTeam {
    profileId: string;
  }

  export interface ArgsDeleteTeam {
    profileId: string;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type SigninResolver = (
    parent: undefined,
    args: ArgsSignin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | null | Promise<AuthPayload | null>;

  export type AddProfileResolver = (
    parent: undefined,
    args: ArgsAddProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export type EditProfileResolver = (
    parent: undefined,
    args: ArgsEditProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export type DeleteProfileResolver = (
    parent: undefined,
    args: ArgsDeleteProfile,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Profile | Promise<Profile>;

  export type CreateTeamResolver = (
    parent: undefined,
    args: ArgsCreateTeam,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | Promise<Team>;

  export type EditTeamResolver = (
    parent: undefined,
    args: ArgsEditTeam,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | Promise<Team>;

  export type JoinTeamResolver = (
    parent: undefined,
    args: ArgsJoinTeam,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | Promise<Team>;

  export type LeaveTeamResolver = (
    parent: undefined,
    args: ArgsLeaveTeam,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | Promise<Team>;

  export type DeleteTeamResolver = (
    parent: undefined,
    args: ArgsDeleteTeam,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Team | Promise<Team>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    signin: (
      parent: undefined,
      args: ArgsSignin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | null | Promise<AuthPayload | null>;

    addProfile: (
      parent: undefined,
      args: ArgsAddProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;

    editProfile: (
      parent: undefined,
      args: ArgsEditProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;

    deleteProfile: (
      parent: undefined,
      args: ArgsDeleteProfile,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Profile | Promise<Profile>;

    createTeam: (
      parent: undefined,
      args: ArgsCreateTeam,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | Promise<Team>;

    editTeam: (
      parent: undefined,
      args: ArgsEditTeam,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | Promise<Team>;

    joinTeam: (
      parent: undefined,
      args: ArgsJoinTeam,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | Promise<Team>;

    leaveTeam: (
      parent: undefined,
      args: ArgsLeaveTeam,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | Promise<Team>;

    deleteTeam: (
      parent: undefined,
      args: ArgsDeleteTeam,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Team | Promise<Team>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Profile: ProfileResolvers.Type;
  Role: RoleResolvers.Type;
  Game: GameResolvers.Type;
  Team: TeamResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}
